// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Database;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241028014713_InitialSchemaWithSeeds")]
    partial class InitialSchemaWithSeeds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "PermissoesId");

                    b.HasIndex("PermissoesId");

                    b.ToTable("PermissoesGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("UsuariosGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31897765-7930-4244-8ece-359740eeb16d"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9430),
                            EstadoId = new Guid("3143acca-2827-4a32-b739-8805edf3af9a"),
                            Name = "Campinas"
                        },
                        new
                        {
                            Id = new Guid("f41a127c-08c9-4252-b506-a579f80baf60"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9430),
                            EstadoId = new Guid("f3526dfd-19b6-456d-a4f6-68f2d13e086d"),
                            Name = "Niterói"
                        },
                        new
                        {
                            Id = new Guid("645a95a9-a39d-4e64-8cb6-ffd55fc13701"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9440),
                            EstadoId = new Guid("4557b4b6-850a-4b93-91a3-aff8d50525dc"),
                            Name = "Uberlândia"
                        },
                        new
                        {
                            Id = new Guid("ec559354-6188-4524-90ed-48443c4f6537"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9440),
                            EstadoId = new Guid("649a1f82-0a64-4914-89d4-45d9118d6806"),
                            Name = "Salvador"
                        },
                        new
                        {
                            Id = new Guid("8e87e015-52db-495f-a589-0967a902ba26"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9440),
                            EstadoId = new Guid("f34d025b-01ad-44c5-8948-8097e4f18060"),
                            Name = "Curitiba"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7604c4b4-8b17-435e-bbaa-5ed001c5720e"),
                            CpfCnpj = "12345678901",
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9480),
                            Nome = "João Silva"
                        },
                        new
                        {
                            Id = new Guid("e74fcae8-5d2f-421e-88b0-2f32dd70e6e4"),
                            CpfCnpj = "23456789012",
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9480),
                            Nome = "Maria Oliveira"
                        },
                        new
                        {
                            Id = new Guid("7a94550a-eef4-4eae-b820-4cd1b2f07c20"),
                            CpfCnpj = "34567890123",
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9490),
                            Nome = "Carlos Souza"
                        },
                        new
                        {
                            Id = new Guid("dabfdbac-a4b7-4274-8294-340c0dfc4a8d"),
                            CpfCnpj = "45678901234",
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9490),
                            Nome = "Ana Santos"
                        },
                        new
                        {
                            Id = new Guid("f904176b-25ca-43c9-adf1-68e062b7ed6a"),
                            CpfCnpj = "56789012345",
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9490),
                            Nome = "Pedro Costa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3143acca-2827-4a32-b739-8805edf3af9a"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9360),
                            Name = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("f3526dfd-19b6-456d-a4f6-68f2d13e086d"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9360),
                            Name = "Rio de Janeiro",
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("4557b4b6-850a-4b93-91a3-aff8d50525dc"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9370),
                            Name = "Minas Gerais",
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("649a1f82-0a64-4914-89d4-45d9118d6806"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9370),
                            Name = "Bahia",
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("f34d025b-01ad-44c5-8948-8097e4f18060"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9370),
                            Name = "Paraná",
                            Sigla = "PR"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.FonteDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaMedia")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FontesDeEnergia");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6a6e8bb0-82ff-4732-b45b-711a779438bb"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9520),
                            Tipo = "Solar"
                        },
                        new
                        {
                            Id = new Guid("4b83e4d7-88ff-4c95-ae0a-1368e8360639"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9520),
                            Tipo = "Eólica"
                        },
                        new
                        {
                            Id = new Guid("a17dfae0-833c-4337-9d75-8274e6aa9b9a"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9520),
                            Tipo = "Biomassa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.GrupoPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GruposPermissoes");
                });

            modelBuilder.Entity("app.Models.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("839a397d-0c98-4ec8-a118-c0314f5991ce"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9560),
                            Nome = "Usinas"
                        },
                        new
                        {
                            Id = new Guid("a3072ae8-afd3-44b7-b065-fcfa93081306"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9560),
                            Nome = "Clientes"
                        },
                        new
                        {
                            Id = new Guid("cf433852-d379-45f8-bc1d-84c38369fa1d"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9570),
                            Nome = "Cidades"
                        },
                        new
                        {
                            Id = new Guid("ecf8a0d2-1007-4871-9605-301ba9531e38"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9570),
                            Nome = "Estados"
                        },
                        new
                        {
                            Id = new Guid("6a19c718-77e5-497b-8f6c-8e18eba2c710"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9570),
                            Nome = "FontesDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("fc8df1b5-3795-40d3-af39-b80891b987d3"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9570),
                            Nome = "ProducaoDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("13127d6a-0f7d-4a54-8c5e-fb7233e8b35d"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9570),
                            Nome = "Usuarios"
                        },
                        new
                        {
                            Id = new Guid("afa59421-e26e-42f0-8795-35363a8890a5"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9580),
                            Nome = "GruposPermissoes"
                        },
                        new
                        {
                            Id = new Guid("3e6f8f63-8f6e-47ac-b82a-8bdb9e78e3a4"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9580),
                            Nome = "Permissoes"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataProducao")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaOperacional")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("EnergiaGeradaKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsinaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsinaId");

                    b.ToTable("ProducoesDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CapacidadeKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("FonteDeEnergiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusOperacional")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FonteDeEnergiaId");

                    b.ToTable("Usinas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b3bb259-3854-4e83-9469-6aae4f8ae97c"),
                            CapacidadeKW = 1000.0m,
                            CidadeId = new Guid("31897765-7930-4244-8ece-359740eeb16d"),
                            ClienteId = new Guid("7604c4b4-8b17-435e-bbaa-5ed001c5720e"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9670),
                            DataInicio = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua A, 123",
                            FonteDeEnergiaId = new Guid("6a6e8bb0-82ff-4732-b45b-711a779438bb"),
                            Nome = "Usina Solar SP",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("59776dd3-5897-4771-adcb-ac588d28f81d"),
                            CapacidadeKW = 1500.0m,
                            CidadeId = new Guid("f41a127c-08c9-4252-b506-a579f80baf60"),
                            ClienteId = new Guid("e74fcae8-5d2f-421e-88b0-2f32dd70e6e4"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9680),
                            DataInicio = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua B, 456",
                            FonteDeEnergiaId = new Guid("4b83e4d7-88ff-4c95-ae0a-1368e8360639"),
                            Nome = "Usina Eólica RJ",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("6e47b6ce-bdd5-44be-ad74-b2f04b3503b1"),
                            CapacidadeKW = 800.0m,
                            CidadeId = new Guid("645a95a9-a39d-4e64-8cb6-ffd55fc13701"),
                            ClienteId = new Guid("7a94550a-eef4-4eae-b820-4cd1b2f07c20"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9690),
                            DataInicio = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua C, 789",
                            FonteDeEnergiaId = new Guid("a17dfae0-833c-4337-9d75-8274e6aa9b9a"),
                            Nome = "Usina Biomassa MG",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("5e5d1725-3417-4611-9860-27dd6cc1ea90"),
                            CapacidadeKW = 1200.0m,
                            CidadeId = new Guid("ec559354-6188-4524-90ed-48443c4f6537"),
                            ClienteId = new Guid("dabfdbac-a4b7-4274-8294-340c0dfc4a8d"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9690),
                            DataInicio = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua D, 321",
                            FonteDeEnergiaId = new Guid("6a6e8bb0-82ff-4732-b45b-711a779438bb"),
                            Nome = "Usina Solar BA",
                            StatusOperacional = "Em Manutenção"
                        },
                        new
                        {
                            Id = new Guid("f93fab41-2852-4ed3-bc30-147cde9ab683"),
                            CapacidadeKW = 2000.0m,
                            CidadeId = new Guid("8e87e015-52db-495f-a589-0967a902ba26"),
                            ClienteId = new Guid("f904176b-25ca-43c9-adf1-68e062b7ed6a"),
                            CreatedAt = new DateTime(2024, 10, 27, 22, 47, 13, 524, DateTimeKind.Local).AddTicks(9700),
                            DataInicio = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua E, 654",
                            FonteDeEnergiaId = new Guid("4b83e4d7-88ff-4c95-ae0a-1368e8360639"),
                            Nome = "Usina Eólica PR",
                            StatusOperacional = "Operando"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Permissao", null)
                        .WithMany()
                        .HasForeignKey("PermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.HasOne("app.Models.Entities.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.HasOne("app.Models.Entities.Usina", "Usina")
                        .WithMany("ProducoesDeEnergia")
                        .HasForeignKey("UsinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usina");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.HasOne("app.Models.Entities.Cidade", "Cidade")
                        .WithMany("Usinas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usinas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.FonteDeEnergia", "FonteDeEnergia")
                        .WithMany()
                        .HasForeignKey("FonteDeEnergiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Cliente");

                    b.Navigation("FonteDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usuarios")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Navigation("Usinas");
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Navigation("Usinas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Navigation("ProducoesDeEnergia");
                });
#pragma warning restore 612, 618
        }
    }
}
