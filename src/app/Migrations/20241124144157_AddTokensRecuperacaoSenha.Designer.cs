// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app.Database;

#nullable disable

namespace app.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241124144157_AddTokensRecuperacaoSenha")]
    partial class AddTokensRecuperacaoSenha
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "PermissoesId");

                    b.HasIndex("PermissoesId");

                    b.ToTable("PermissoesGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.Property<Guid>("GruposPermissoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuariosId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("GruposPermissoesId", "UsuariosId");

                    b.HasIndex("UsuariosId");

                    b.ToTable("UsuariosGruposPermissoes", (string)null);
                });

            modelBuilder.Entity("TokenRecuperacaoSenha", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataExpiracao")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UsuarioId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("TokensRecuperacaoSenha");
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EstadoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c04a635d-dbd4-49ae-98f3-1e5b4aff2418"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(440),
                            EstadoId = new Guid("c9aa1db8-c29e-400c-a775-34e173f636cd"),
                            Name = "Campinas"
                        },
                        new
                        {
                            Id = new Guid("2747e60e-7d49-4928-9900-c0f18359e104"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(444),
                            EstadoId = new Guid("6c1e2141-6780-43f5-b6e5-4b37da741854"),
                            Name = "Niterói"
                        },
                        new
                        {
                            Id = new Guid("acc23d64-be08-47e3-8dda-0390ecae9b82"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(445),
                            EstadoId = new Guid("753f4629-103b-4ae6-9dbb-18fcc5b5dabc"),
                            Name = "Uberlândia"
                        },
                        new
                        {
                            Id = new Guid("ff5fa089-e460-4b1e-9a33-e35597d8094a"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(447),
                            EstadoId = new Guid("160508a5-3ccf-42db-92ef-c9e670ba1dd0"),
                            Name = "Salvador"
                        },
                        new
                        {
                            Id = new Guid("b45eb88a-7229-47ce-8495-f55c0385200b"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(448),
                            EstadoId = new Guid("cee3eb34-a202-4f4a-9091-6e998b6667d6"),
                            Name = "Curitiba"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CpfCnpj")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CpfCnpj")
                        .IsUnique();

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5deb620c-a234-4081-8cec-134bfb883a70"),
                            CpfCnpj = "12345678901",
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(488),
                            Nome = "João Silva"
                        },
                        new
                        {
                            Id = new Guid("5f2bc1db-b967-4a34-ba21-04e92b375877"),
                            CpfCnpj = "23456789012",
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(492),
                            Nome = "Maria Oliveira"
                        },
                        new
                        {
                            Id = new Guid("d9dff179-b1ff-40bf-8e57-45ab6bbf5080"),
                            CpfCnpj = "34567890123",
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(493),
                            Nome = "Carlos Souza"
                        },
                        new
                        {
                            Id = new Guid("31cb83e6-f32c-41ad-8e88-c22803237a14"),
                            CpfCnpj = "45678901234",
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(495),
                            Nome = "Ana Santos"
                        },
                        new
                        {
                            Id = new Guid("72fd29bd-e52d-49b0-aa43-ff911c2d4156"),
                            CpfCnpj = "56789012345",
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(496),
                            Nome = "Pedro Costa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Estados");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9aa1db8-c29e-400c-a775-34e173f636cd"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(285),
                            Name = "São Paulo",
                            Sigla = "SP"
                        },
                        new
                        {
                            Id = new Guid("6c1e2141-6780-43f5-b6e5-4b37da741854"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(290),
                            Name = "Rio de Janeiro",
                            Sigla = "RJ"
                        },
                        new
                        {
                            Id = new Guid("753f4629-103b-4ae6-9dbb-18fcc5b5dabc"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(292),
                            Name = "Minas Gerais",
                            Sigla = "MG"
                        },
                        new
                        {
                            Id = new Guid("160508a5-3ccf-42db-92ef-c9e670ba1dd0"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(293),
                            Name = "Bahia",
                            Sigla = "BA"
                        },
                        new
                        {
                            Id = new Guid("cee3eb34-a202-4f4a-9091-6e998b6667d6"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(295),
                            Name = "Paraná",
                            Sigla = "PR"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.FonteDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaMedia")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FontesDeEnergia");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a5f4e1a-ea3c-4c46-b0a7-38ca857e4ca5"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(533),
                            Tipo = "Solar"
                        },
                        new
                        {
                            Id = new Guid("c60dcc51-3c2b-4db8-88a0-f2d088c4c56c"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(536),
                            Tipo = "Eólica"
                        },
                        new
                        {
                            Id = new Guid("27ab4595-594f-44c0-a7be-d0d3aef5d64a"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(537),
                            Tipo = "Biomassa"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.GrupoPermissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("GruposPermissoes");
                });

            modelBuilder.Entity("app.Models.Entities.Permissao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissoes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34b1c2e9-976d-4bec-bbc9-1fbaaa4054f6"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(564),
                            Nome = "Usinas"
                        },
                        new
                        {
                            Id = new Guid("0abe8067-f9c7-483b-bca3-8289fc794f6e"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(566),
                            Nome = "Clientes"
                        },
                        new
                        {
                            Id = new Guid("ba63cfa7-d3f4-4b3d-aab6-178f0b4e9722"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(567),
                            Nome = "Cidades"
                        },
                        new
                        {
                            Id = new Guid("1ca65f82-1d80-4f33-a89a-160a14e016fb"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(568),
                            Nome = "Estados"
                        },
                        new
                        {
                            Id = new Guid("b4f872ec-0275-4b64-b2f6-f60a95f4ba75"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(570),
                            Nome = "FontesDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("4451eb3f-651f-4e41-9cee-fe0f185c862f"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(572),
                            Nome = "ProducaoDeEnergia"
                        },
                        new
                        {
                            Id = new Guid("fff549f9-7ca5-43d5-8676-44d0d64aad7c"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(573),
                            Nome = "Usuarios"
                        },
                        new
                        {
                            Id = new Guid("75dee31e-eba8-4e06-b81e-30196fd47d85"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(575),
                            Nome = "GruposPermissoes"
                        },
                        new
                        {
                            Id = new Guid("19456c4d-915a-4c12-9deb-77f15d1aeca2"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(576),
                            Nome = "Permissoes"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataProducao")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("EficienciaOperacional")
                        .HasColumnType("decimal(5, 2)");

                    b.Property<decimal>("EnergiaGeradaKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UsinaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsinaId");

                    b.ToTable("ProducoesDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CapacidadeKW")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("CidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataInicio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("FonteDeEnergiaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StatusOperacional")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("FonteDeEnergiaId");

                    b.ToTable("Usinas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e3bbf2b7-7537-4974-b376-7cc37f1e465d"),
                            CapacidadeKW = 1000.0m,
                            CidadeId = new Guid("c04a635d-dbd4-49ae-98f3-1e5b4aff2418"),
                            ClienteId = new Guid("5deb620c-a234-4081-8cec-134bfb883a70"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(712),
                            DataInicio = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua A, 123",
                            FonteDeEnergiaId = new Guid("2a5f4e1a-ea3c-4c46-b0a7-38ca857e4ca5"),
                            Nome = "Usina Solar SP",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("4ea8167f-8858-4fb3-b3df-2ee30b62b619"),
                            CapacidadeKW = 1500.0m,
                            CidadeId = new Guid("2747e60e-7d49-4928-9900-c0f18359e104"),
                            ClienteId = new Guid("5f2bc1db-b967-4a34-ba21-04e92b375877"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(721),
                            DataInicio = new DateTime(2022, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua B, 456",
                            FonteDeEnergiaId = new Guid("c60dcc51-3c2b-4db8-88a0-f2d088c4c56c"),
                            Nome = "Usina Eólica RJ",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("6c12ac42-e86b-48a5-b194-215ff3f55d82"),
                            CapacidadeKW = 800.0m,
                            CidadeId = new Guid("acc23d64-be08-47e3-8dda-0390ecae9b82"),
                            ClienteId = new Guid("d9dff179-b1ff-40bf-8e57-45ab6bbf5080"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(725),
                            DataInicio = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua C, 789",
                            FonteDeEnergiaId = new Guid("27ab4595-594f-44c0-a7be-d0d3aef5d64a"),
                            Nome = "Usina Biomassa MG",
                            StatusOperacional = "Operando"
                        },
                        new
                        {
                            Id = new Guid("4b1f5708-1d85-4e3d-a0dd-298a5fd82e56"),
                            CapacidadeKW = 1200.0m,
                            CidadeId = new Guid("ff5fa089-e460-4b1e-9a33-e35597d8094a"),
                            ClienteId = new Guid("31cb83e6-f32c-41ad-8e88-c22803237a14"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(729),
                            DataInicio = new DateTime(2022, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua D, 321",
                            FonteDeEnergiaId = new Guid("2a5f4e1a-ea3c-4c46-b0a7-38ca857e4ca5"),
                            Nome = "Usina Solar BA",
                            StatusOperacional = "Em Manutenção"
                        },
                        new
                        {
                            Id = new Guid("4ef9a52e-e74c-48e4-abde-124262346ba8"),
                            CapacidadeKW = 2000.0m,
                            CidadeId = new Guid("b45eb88a-7229-47ce-8495-f55c0385200b"),
                            ClienteId = new Guid("72fd29bd-e52d-49b0-aa43-ff911c2d4156"),
                            CreatedAt = new DateTime(2024, 11, 24, 11, 41, 57, 406, DateTimeKind.Local).AddTicks(733),
                            DataInicio = new DateTime(2022, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua E, 654",
                            FonteDeEnergiaId = new Guid("c60dcc51-3c2b-4db8-88a0-f2d088c4c56c"),
                            Nome = "Usina Eólica PR",
                            StatusOperacional = "Operando"
                        });
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("app.Models.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Usuario");
                });

            modelBuilder.Entity("GrupoPermissaoPermissao", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Permissao", null)
                        .WithMany()
                        .HasForeignKey("PermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GrupoPermissaoUsuario", b =>
                {
                    b.HasOne("app.Models.Entities.GrupoPermissao", null)
                        .WithMany()
                        .HasForeignKey("GruposPermissoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UsuariosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TokenRecuperacaoSenha", b =>
                {
                    b.HasOne("app.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.HasOne("app.Models.Entities.Estado", "Estado")
                        .WithMany("Cidades")
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("app.Models.Entities.ProducaoDeEnergia", b =>
                {
                    b.HasOne("app.Models.Entities.Usina", "Usina")
                        .WithMany("ProducoesDeEnergia")
                        .HasForeignKey("UsinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usina");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.HasOne("app.Models.Entities.Cidade", "Cidade")
                        .WithMany("Usinas")
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usinas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app.Models.Entities.FonteDeEnergia", "FonteDeEnergia")
                        .WithMany()
                        .HasForeignKey("FonteDeEnergiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cidade");

                    b.Navigation("Cliente");

                    b.Navigation("FonteDeEnergia");
                });

            modelBuilder.Entity("app.Models.Entities.Usuario", b =>
                {
                    b.HasOne("app.Models.Entities.Cliente", "Cliente")
                        .WithMany("Usuarios")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("app.Models.Entities.Cidade", b =>
                {
                    b.Navigation("Usinas");
                });

            modelBuilder.Entity("app.Models.Entities.Cliente", b =>
                {
                    b.Navigation("Usinas");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("app.Models.Entities.Estado", b =>
                {
                    b.Navigation("Cidades");
                });

            modelBuilder.Entity("app.Models.Entities.Usina", b =>
                {
                    b.Navigation("ProducoesDeEnergia");
                });
#pragma warning restore 612, 618
        }
    }
}
